plugins {
    id 'com.android.library'
    id 'kotlin-android'
}

android {
    compileSdkVersion getProperty('project.android.compile') as int

    defaultConfig {
        minSdkVersion getProperty('project.android.min') as int
        targetSdkVersion getProperty('project.android.target') as int
        versionCode getProperty('lib.version.code') as int
        versionName getProperty('trapdoor.lib.version')

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:${getProperty('kotlin.version')}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${getProperty('kotlin.coroutines')}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${getProperty('kotlin.coroutines')}"
    implementation "androidx.appcompat:appcompat:${getProperty('androidx.appcompat')}"
    implementation "com.squareup.okhttp3:okhttp:${getProperty('lib.square.okhttp')}"

    api "androidx.startup:startup-runtime:${getProperty('androidx.startup')}"

    testImplementation "junit:junit:${getProperty('lib.junit')}"

    androidTestImplementation "androidx.test.ext:junit:1.1.1"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.2.0"
}

ext {
    def version = getProperty('trapdoor.lib.version')

    bintrayRepo = getProperty('lib.repo')
    bintrayName = getProperty('lib.repo.project')

    group_id = getProperty('lib.group')
    artifact_id = getProperty('lib.artifact')

    libraryName = getProperty('lib.name')
    libraryVersion = version
    libraryDescription = getProperty('lib.desc')
    siteUrl = getProperty('lib.website')
    gitUrl = getProperty('lib.vcs')
    revisionTag = version

    developerId = getProperty('developer.id')
    developerName = getProperty('developer.name')
    developerEmail = getProperty('developer.email')

    licenseName = 'MIT License'
    licenseUrl = 'https://choosealicense.com/licenses/mit/'
    allLicenses = ['MIT']
}

group = group_id
version = libraryVersion

apply from: '../gradle/maven_install.gradle'
apply from: '../gradle/bintray_upload.gradle'
